#pragma once

#include <Windows.h>

#define PAGE_SHIFT 12
#define PAGE_SIZE (1 << 12)

#define SPAGE_SIZE              0x1000
#define SUPERFETCH_VERSION      0x2D
#define SUPERFETCH_MAGIC        0x6B756843

namespace SuperfetchNative {
	typedef enum class _SUPERFETCH_INFORMATION_CLASS {
		SuperfetchRetrieveTrace = 1,       
		SuperfetchSystemParameters = 2,    
		SuperfetchLogEvent = 3,            
		SuperfetchGenerateTrace = 4,       
		SuperfetchPrefetch = 5,            
		SuperfetchPfnQuery = 6,            
		SuperfetchPfnSetPriority = 7,      
		SuperfetchPrivSourceQuery = 8,     
		SuperfetchSequenceNumberQuery = 9, 
		SuperfetchScenarioPhase = 10,      
		SuperfetchWorkerPriority = 11,     
		SuperfetchScenarioQuery = 12,      
		SuperfetchScenarioPrefetch = 13, 
		SuperfetchRobustnessControl = 14, 
		SuperfetchTimeControl = 15,         
		SuperfetchMemoryListQuery = 16,    
		SuperfetchMemoryRangesQuery = 17,
		SuperfetchTracingControl = 18,      
		SuperfetchTrimWhileAgingControl = 19,
		SuperfetchInformationMax = 20
	} SUPERFETCH_INFORMATION_CLASS;

	typedef struct _SUPERFETCH_INFORMATION {
		ULONG Version;
		ULONG Magic;
		SUPERFETCH_INFORMATION_CLASS InfoClass;
		PVOID Data;
		ULONG Length;
	} SUPERFETCH_INFORMATION, * PSUPERFETCH_INFORMATION;

	typedef struct _RTL_BITMAP {
		ULONG SizeOfBitMap;
		PULONG Buffer;
	} RTL_BITMAP, * PRTL_BITMAP;

	typedef struct _PF_PHYSICAL_MEMORY_RANGE {
		ULONG_PTR BasePfn;
		ULONG_PTR PageCount;
	} PF_PHYSICAL_MEMORY_RANGE, * PPF_PHYSICAL_MEMORY_RANGE;

	typedef struct _PF_MEMORY_RANGE_INFO {
		ULONG Version;
		ULONG RangeCount;
		PF_PHYSICAL_MEMORY_RANGE Ranges[ANYSIZE_ARRAY];
	} PF_MEMORY_RANGE_INFO, * PPF_MEMORY_RANGE_INFO;

	typedef struct __declspec(align(8)) _PF_MEMORY_RANGE_INFO_V2 {
		ULONG version;
		ULONG flags;
		ULONG ranges_count;
		_PF_PHYSICAL_MEMORY_RANGE ranges[ANYSIZE_ARRAY];
	} PF_MEMORY_RANGE_INFO_V2, * PPF_MEMORY_RANGE_INFO_V2;


	typedef struct _PHYSICAL_MEMORY_RUN {
		SIZE_T BasePage;
		SIZE_T PageCount;
	} PHYSICAL_MEMORY_RUN, * PPHYSICAL_MEMORY_RUN;

	typedef enum class _SYSTEM_INFORMATION_CLASS
	{
		SystemBasicInformation,
		SystemProcessorInformation,
		SystemPerformanceInformation,
		SystemTimeOfDayInformation,
		SystemPathInformation, 
		SystemProcessInformation,
		SystemCallCountInformation,
		SystemDeviceInformation,
		SystemProcessorPerformanceInformation,
		SystemFlagsInformation,
		SystemCallTimeInformation,
		SystemModuleInformation,
		SystemLocksInformation,
		SystemStackTraceInformation,
		SystemPagedPoolInformation,
		SystemNonPagedPoolInformation,
		SystemHandleInformation,
		SystemObjectInformation,
		SystemPageFileInformation,
		SystemVdmInstemulInformation,
		SystemVdmBopInformation,
		SystemFileCacheInformation,
		SystemPoolTagInformation,
		SystemInterruptInformation,
		SystemDpcBehaviorInformation,
		SystemFullMemoryInformation,
		SystemLoadGdiDriverInformation,
		SystemUnloadGdiDriverInformation,
		SystemTimeAdjustmentInformation,
		SystemSummaryMemoryInformation,
		SystemMirrorMemoryInformation,
		SystemPerformanceTraceInformation,
		SystemObsolete0,
		SystemExceptionInformation,
		SystemCrashDumpStateInformation,
		SystemKernelDebuggerInformation,
		SystemContextSwitchInformation,
		SystemRegistryQuotaInformation,
		SystemExtendServiceTableInformation, 
		SystemPrioritySeperation,
		SystemPlugPlayBusInformation,
		SystemDockInformation,
		SystemPowerInformationNative,
		SystemProcessorSpeedInformation,
		SystemCurrentTimeZoneInformation,
		SystemLookasideInformation,
		SystemTimeSlipNotification,
		SystemSessionCreate,
		SystemSessionDetach,
		SystemSessionInformation,
		SystemRangeStartInformation,
		SystemVerifierInformation,
		SystemAddVerifier,
		SystemSessionProcessesInformation,
		SystemLoadGdiDriverInSystemSpaceInformation,
		SystemNumaProcessorMap,
		SystemPrefetcherInformation,
		SystemExtendedProcessInformation,
		SystemRecommendedSharedDataAlignment,
		SystemComPlusPackage,
		SystemNumaAvailableMemory,
		SystemProcessorPowerInformation,
		SystemEmulationBasicInformation,
		SystemEmulationProcessorInformation,
		SystemExtendedHanfleInformation,
		SystemLostDelayedWriteInformation,
		SystemBigPoolInformation,
		SystemSessionPoolTagInformation,
		SystemSessionMappedViewInformation,
		SystemHotpatchInformation,
		SystemObjectSecurityMode,
		SystemWatchDogTimerHandler,
		SystemWatchDogTimerInformation,
		SystemLogicalProcessorInformation,
		SystemWo64SharedInformationObosolete,
		SystemRegisterFirmwareTableInformationHandler,
		SystemFirmwareTableInformation,
		SystemModuleInformationEx,
		SystemVerifierTriageInformation,
		SystemSuperfetchInformation,
		SystemMemoryListInformation,
		SystemFileCacheInformationEx,
		SystemThreadPriorityClientIdInformation,
		SystemProcessorIdleCycleTimeInformation,
		SystemVerifierCancellationInformation,
		SystemProcessorPowerInformationEx,
		SystemRefTraceInformation,
		SystemSpecialPoolInformation,
		SystemProcessIdInformation,
		SystemErrorPortInformation,
		SystemBootEnvironmentInformation,
		SystemHypervisorInformation,
		SystemVerifierInformationEx,
		SystemTimeZoneInformation,
		SystemImageFileExecutionOptionsInformation,
		SystemCoverageInformation,
		SystemPrefetchPathInformation,
		SystemVerifierFaultsInformation,
		MaxSystemInfoClass,
	} SYSTEM_INFORMATION_CLASS;

	typedef struct _SYSTEM_BASIC_INFORMATION {
		ULONG Reserved;
		ULONG TimerResolution;
		ULONG PageSize;
		ULONG NumberOfPhysicalPages;
		ULONG LowestPhysicalPageNumber;
		ULONG HighestPhysicalPageNumber;
		ULONG AllocationGranularity;
		ULONG_PTR MinimumUserModeAddress;
		ULONG_PTR MaximumUserModeAddress;
		ULONG_PTR ActiveProcessorsAffinityMask;
		CCHAR NumberOfProcessors;
	} SYSTEM_BASIC_INFORMATION, * PSYSTEM_BASIC_INFORMATION;

	struct RTL_PROCESS_MODULE_INFORMATION
	{
		unsigned int Section;
		void* MappedBase;
		void* ImageBase;
		unsigned int ImageSize;
		unsigned int Flags;
		unsigned short LoadOrderIndex;
		unsigned short InitOrderIndex;
		unsigned short LoadCount;
		unsigned short OffsetToFileName;
		char FullPathName[256];
	};

	struct RTL_PROCESS_MODULES
	{
		unsigned int NumberOfModules;
		RTL_PROCESS_MODULE_INFORMATION Modules[0];
	};

	struct SYSTEM_HANDLE
	{
		ULONG ProcessId;
		BYTE ObjectTypeNumber;
		BYTE Flags;
		USHORT Handle;
		PVOID Object;
		ACCESS_MASK GrantedAccess;
	};

	struct SYSTEM_HANDLE_INFORMATION
	{
		ULONG HandleCount;
		SYSTEM_HANDLE Handles[0];
	};
}