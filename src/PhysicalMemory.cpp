#include "PhysicalMemory.h"
#include "Superfetch.h"
#include "WnBios64Exploit.h"

namespace PhysicalMemory
{
	std::vector<PhysicalMemoryRange> g_physicalMemoryRanges;

	bool openPhysicalMemory()
	{
		std::vector<Superfetch::PhysicalMemoryRange> ranges;
		if (!Superfetch::getPhysicalMemoryRanges(ranges))
			return false;

		for (const auto& range : ranges)
		{
			PhysicalMemoryRange physicalRange;
			physicalRange.start = range.start;
			physicalRange.end = range.end;

			HANDLE handle = nullptr;
			PVOID objectAddress = nullptr;
			PVOID sectionAddress = nullptr;

			if (!WnBios64Exploit::mapPhysicalMemory(range.start, range.size, &handle, &sectionAddress, &objectAddress))
				return false;

			physicalRange.handle = handle;
			physicalRange.sectionAddress = reinterpret_cast<uintptr_t>(sectionAddress);
			physicalRange.objectAddress = objectAddress;

			g_physicalMemoryRanges.push_back(physicalRange);
		}
	}

	bool closePhysicalMemory()
	{
		for (const auto& range : g_physicalMemoryRanges)
		{
			if (!WnBios64Exploit::unmapPhysicalMemory(range.handle, reinterpret_cast<PVOID>(range.sectionAddress), range.objectAddress))
				return false;
		}

		return true;
	}

	bool readPhysicalMemory(uintptr_t address, void* buffer, size_t size)
	{
		auto range = getPhysicalMemoryRange(address);
		if (!range)
			return false;

		auto translatedAddress = range->translate(address);

		bool ret = false;
		__try
		{
			ret = memcpy(buffer, reinterpret_cast<void*>(translatedAddress), size);
		}
		__except (EXCEPTION_EXECUTE_HANDLER)
		{
			ret = false;
		}

		return ret;
	}

	bool writePhysicalMemory(uintptr_t address, const void* buffer, size_t size)
	{
		auto range = getPhysicalMemoryRange(address);
		if (!range)
			return false;

		auto translatedAddress = range->translate(address);

		bool ret = false;
		__try
		{
			ret = memcpy(reinterpret_cast<void*>(translatedAddress), buffer, size);
		}
		__except (EXCEPTION_EXECUTE_HANDLER)
		{
			ret = false;
		}

		return ret;
	}

	const PhysicalMemoryRange* getPhysicalMemoryRange(uintptr_t address)
	{
		for (int i = g_physicalMemoryRanges.size() - 1; i >= 0; i--)
		{
			auto& range = g_physicalMemoryRanges[i];

			if (address >= range.start && address < range.end)
			{
				return &g_physicalMemoryRanges[i];
			}
		}

		return nullptr;
	}
}
