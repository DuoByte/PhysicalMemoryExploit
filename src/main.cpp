#include <iostream>
#include <Windows.h>
#include <ntstatus.h>

#include "Native.h"
#include "Superfetch.h"
#include "WnBios64Exploit.h"
#include "PhysicalMemory.h"

#pragma comment(lib, "ntdll.lib")

bool adjustPrivilege() {
	BOOLEAN old;
	auto status = RtlAdjustPrivilege(SE_PROF_SINGLE_PROCESS_PRIVILEGE, TRUE, FALSE, &old);
	status |= RtlAdjustPrivilege(SE_DEBUG_PRIVILEGE, TRUE, FALSE, &old);

	if (status != ERROR_SUCCESS)
		return false;

	SuperfetchNative::SYSTEM_BASIC_INFORMATION basicInfo;
	if (NtQuerySystemInformation((SuperfetchNative::SYSTEM_INFORMATION_CLASS)SuperfetchNative::SYSTEM_INFORMATION_CLASS::SystemBasicInformation, &basicInfo, sizeof(basicInfo), nullptr) != STATUS_SUCCESS)
		return false;

	return true;
}

int main() {
	
	if (!adjustPrivilege())
	{
		std::cout << "Failed to adjust privilege" << std::endl;
		return 1;
	}

	if (!WnBios64Exploit::openDriver())
	{
		std::cout << "Failed to open driver" << std::endl;
		return 1;
	}

	std::cout << "Driver opened" << std::endl;

	if (!PhysicalMemory::openPhysicalMemory())
	{
		std::cout << "Failed to open physical memory" << std::endl;
		return 1;
	}

	std::cout << "Physical memory opened" << std::endl;

	uintptr_t address = 0x1000;
	uintptr_t readSize = 0x100;
	std::vector<uint8_t> buffer(readSize);
	if (!PhysicalMemory::readPhysicalMemory(address, buffer.data(), readSize))
	{
		std::cout << "Failed to read physical memory" << std::endl;
		return 1;
	}

	std::cout << "Read physical memory successfully" << std::endl;

	if (!PhysicalMemory::closePhysicalMemory())
	{
		std::cout << "Failed to close physical memory" << std::endl;
		return 1;
	}

	std::cout << "Physical memory closed" << std::endl;

	return 0;
}